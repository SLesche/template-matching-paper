function[] = initialize_simulation_db(db_location)
        % Create new database
    conn = sqlite(db_location, "create");

    createTableTaskQuery = [
        'CREATE TABLE IF NOT EXISTS task (',...
        'task_id INTEGER PRIMARY KEY, ',...
        'data_source VARCHAR(100), ',...
        'task VARCHAR(100), ',...
        'filter INTEGER, ', ...
        'task_description TEXT',...
        ');', ...
        ];
    exec(conn, createTableTaskQuery);

    % Create table_method
    createTableMethodQuery = [
        'CREATE TABLE IF NOT EXISTS method (',...
        'method_id INTEGER, ',...
        'task_id INTEGER, ',...
        'window_name VARCHAR(100), ', ...
        'component VARCHAR(10), ', ...
        'approach VARCHAR(100), ',...
        'weight VARCHAR(100), ',...
        'normalize VARCHAR(100), ',...
        'penalty VARCHAR(100), ',...
        'simulation_stretch DECIMAL, ', ...
        'simulation_sd DECIMAL, ', ...
        'stretch_sd DECIMAL, ',...
        'method_description TEXT, ',...
        'FOREIGN KEY (task_id) REFERENCES task(task_id), ', ...
        'UNIQUE (task_id, method_id)'...
        ');', ...
        ];
    exec(conn, createTableMethodQuery);

    createTableSimulationQuery = [...
        'CREATE TABLE IF NOT EXISTS simulation (',...
        'task_id INTEGER, ', ...
        'method_id INTEGER, ',...
        'simulation_id INTEGER, ',...
        'mean_shift DECIMAL, ',...
        'sd_shift DECIMAL, ',...
        'icc REAL, ',...
        'FOREIGN KEY (task_id) REFERENCES task(task_id), ', ...
        'FOREIGN KEY (method_id) REFERENCES method(method_id), ', ...
        'UNIQUE (task_id, method_id, simulation_id)', ...
        ');'...
        ];
    exec(conn, createTableSimulationQuery)

    createTableSubjectQuery = [...
        'CREATE TABLE IF NOT EXISTS subject (',...
        'task_id INTEGER, ', ...
        'method_id INTEGER, ',...
        'subject_id INTEGER, ',...
        'true_shift DECIMAL, ', ...
        'mean_shift DECIMAL, ',...
        'sd_shift DECIMAL, ',...
        'FOREIGN KEY (task_id) REFERENCES task(task_id), ', ...
        'FOREIGN KEY (method_id) REFERENCES method(method_id), ', ...
        'UNIQUE (task_id, method_id, subject_id)', ...
        ');'...
        ];
    exec(conn, createTableSubjectQuery)

    % Create table_data
    createTableDataQuery = [...
        'CREATE TABLE IF NOT EXISTS data (',...
        'task_id INTEGER, ', ...
        'method_id INTEGER, ',...
        'simulation_id INETER, ',...
        'subject INTEGER, ',...
        'is_simulation BOOLEAN, ',...
        'simulation_shift DECIMAL, ', ...
        'latency DECIMAL, ',...
        'fit_cor DECIMAL, ', ...
        'fit_distance DECIMAL, ', ...
        'b_param DECIMAL, ',...
        'FOREIGN KEY (task_id) REFERENCES task(task_id), ', ...
        'FOREIGN KEY (method_id) REFERENCES method(method_id), ', ...
        'FOREIGN KEY (simulation_id) REFERENCES simulation(simulation_id), ', ...
        'UNIQUE (task_id, method_id, simulation_id, subject, is_simulation)', ...
        ');'...
        ];
    exec(conn, createTableDataQuery);

    close(conn);

end